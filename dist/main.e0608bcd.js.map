{"version":3,"sources":["main.js"],"names":["Available","Max","Allocation","Need","btn","document","querySelector","select","compare","a","b","m","i","allTrue","finish","length","main","request","index","alert","Work","Finish","push","safe_arr","checkSafe","j","onclick","selectedIndex","box1","resource","value","box2","box3"],"mappings":"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","file":"main.e0608bcd.js","sourceRoot":"..\\src","sourcesContent":["let Available = [3,3,2], //当前可用资源\r\nMax = [\r\n    [7,5,3],\r\n    [3,2,2],\r\n    [9,0,2],\r\n    [2,2,2],\r\n    [4,3,3]\r\n],//各进程对A B C 类资源的最大需求量\r\nAllocation = [\r\n    [0,1,0],\r\n    [2,0,0],\r\n    [3,0,2],\r\n    [2,1,1],\r\n    [0,0,2]\r\n],//各进程现已分配的A B C 类资源数量\r\nNeed = [\r\n    [7,4,3],\r\n    [1,2,2],\r\n    [6,0,0],\r\n    [0,1,1],\r\n    [4,3,1]\r\n]//各进程仍需要的A B C 类资源数量\r\nlet btn = document.querySelector('.btn')\r\nlet select = document.querySelector('#process')\r\n\r\nbtn.onclick = () => {\r\n    let index = select.selectedIndex - 1\r\n    let box1 = resource.box1.value - 0\r\n    let box2 = resource.box2.value - 0\r\n    let box3 = resource.box3.value - 0\r\n    let request = []\r\n    request.push(box1)\r\n    request.push(box2)\r\n    request.push(box3)\r\n    main(request, index)\r\n}\r\n\r\n//比较函数\r\nfunction compare(a, b ,m) {\r\n    for (let i = 0; i < m; i++) {\r\n        if (a[i] <= b[i]) {\r\n            continue\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n//判断是否全为true\r\nfunction allTrue(finish) {\r\n    for (let i = 0; i < finish.length; i++) {\r\n        if (finish[i]) {\r\n            continue\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n//银行家算法\r\nfunction main (request, index) {\r\n    //先让请求数量和剩余需求数量做对比\r\n    if(compare(request, Need[index], request.length)) {\r\n        //再让请求数量和当前可用资源数量做对比\r\n        if(compare(request, Available, request.length)) {\r\n            //假定可以成功分配\r\n            for (let i = 0; i < Available.length; i++) {\r\n                Available[i] -= request[i]\r\n            }\r\n            for (let i = 0; i < Available.length; i++) {\r\n                Allocation[index][i] += request[i]\r\n            }\r\n            for (let i = 0; i < Available.length; i++) {\r\n                Need[index][i] -= request[i]\r\n            }\r\n\r\n            let Work = []\r\n            for (let i = 0; i < Available.length; i++) {\r\n                Work[i] = Available[i]\r\n            }\r\n\r\n            let Finish = []\r\n            for (let i = 0; i < Allocation.length; i++) {\r\n                Finish.push(false)\r\n            }\r\n\r\n            let safe_arr = []\r\n\r\n            checkSafe()\r\n\r\n            function checkSafe () {\r\n                for (let i = 0; i < Allocation.length; i++) {\r\n                    if (Finish[i] === false) {\r\n                        if (compare(Need[i], Work, Available.length)) {\r\n                            for (let j = 0; j < Available.length; j++) {\r\n                                Work[j] += Allocation[i][j]\r\n                            }\r\n                           //如果该进程能完成，则置finish为true                                    \r\n                            Finish[i] = true\r\n                            safe_arr.push(i)//加进安全序列\r\n                            checkSafe()\r\n                        } else {\r\n                            continue\r\n                        }\r\n                    } else {\r\n                        continue\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (allTrue(Finish)) {\r\n                alert('当前请求安全，' + '安全序列为：' + safe_arr)\r\n            } else {\r\n                for (let i = 0; i < Available.length; i++) {\r\n                    Available[i] += request[i]\r\n                }\r\n                for (let i = 0; i < Available.length; i++) {\r\n                    Allocation[index][i] -= request[i]\r\n                }\r\n                for (let i = 0; i < Available.length; i++) {\r\n                    Need[index][i] += request[i]\r\n                }\r\n                for (let i = 0; i < Available.length; i++) {\r\n                    Work[i] = Available[i]\r\n                }\r\n                alert('当前请求不安全，系统不予分配资源。')\r\n            }\r\n        } else {\r\n            alert('当前可用资源不足。')\r\n            return false\r\n        }\r\n    } else {\r\n        alert('请求资源超过进程的最大需求量。')\r\n        return false\r\n    }\r\n}\r\n\r\n"]}